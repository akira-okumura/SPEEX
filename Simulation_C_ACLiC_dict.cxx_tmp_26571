// Do NOT change. Changes will be lost next time file is generated

#define R__DICTIONARY_FILENAME dIUsersdIMajor_HeartdISPEEX2dISimulation_C_ACLiC_dict
#define R__NO_DEPRECATION

/*******************************************************************/
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define G__DICTIONARY
#include "RConfig.h"
#include "TClass.h"
#include "TDictAttributeMap.h"
#include "TInterpreter.h"
#include "TROOT.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"
#include <algorithm>
#include "TCollectionProxyInfo.h"
/*******************************************************************/

#include "TDataMember.h"

// The generated code does not explicitly qualifies STL entities
namespace std {} using namespace std;

// Header files passed as explicit arguments
#include "/Users/Major_Heart/SPEEX2/./Simulation.C"

// Header files passed via #pragma extra_include

namespace ROOT {
   static TClass *Simulation_Dictionary();
   static void Simulation_TClassManip(TClass*);
   static void *new_Simulation(void *p = 0);
   static void *newArray_Simulation(Long_t size, void *p);
   static void delete_Simulation(void *p);
   static void deleteArray_Simulation(void *p);
   static void destruct_Simulation(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Simulation*)
   {
      ::Simulation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::Simulation));
      static ::ROOT::TGenericClassInfo 
         instance("Simulation", "Simulation.C", 31,
                  typeid(::Simulation), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &Simulation_Dictionary, isa_proxy, 4,
                  sizeof(::Simulation) );
      instance.SetNew(&new_Simulation);
      instance.SetNewArray(&newArray_Simulation);
      instance.SetDelete(&delete_Simulation);
      instance.SetDeleteArray(&deleteArray_Simulation);
      instance.SetDestructor(&destruct_Simulation);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Simulation*)
   {
      return GenerateInitInstanceLocal((::Simulation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::Simulation*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *Simulation_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::Simulation*)0x0)->GetClass();
      Simulation_TClassManip(theClass);
   return theClass;
   }

   static void Simulation_TClassManip(TClass* theClass){
      theClass->CreateAttributeMap();
      TDictAttributeMap* attrMap( theClass->GetAttributeMap() );
      attrMap->AddProperty("file_name","/Users/Major_Heart/SPEEX2/./Simulation.C");
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_Simulation(void *p) {
      return  p ? new(p) ::Simulation : new ::Simulation;
   }
   static void *newArray_Simulation(Long_t nElements, void *p) {
      return p ? new(p) ::Simulation[nElements] : new ::Simulation[nElements];
   }
   // Wrapper around operator delete
   static void delete_Simulation(void *p) {
      delete ((::Simulation*)p);
   }
   static void deleteArray_Simulation(void *p) {
      delete [] ((::Simulation*)p);
   }
   static void destruct_Simulation(void *p) {
      typedef ::Simulation current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Simulation

